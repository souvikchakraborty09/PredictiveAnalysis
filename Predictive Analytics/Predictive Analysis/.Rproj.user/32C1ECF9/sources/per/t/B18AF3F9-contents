#for all tweets

Twitter_data=read.csv(file.choose(),header=TRUE)
View(Twitter_data)
str(Twitter_data)
Twitter_data$text=factor(Twitter_data$text)
str(Twitter_data$text)
install.packages("tm")
library(tm)
corpus <- iconv(Twitter_data$text)
sms_corpus <- Corpus(VectorSource(Twitter_data$text))
print(sms_corpus)
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus,
                           content_transformer(tolower))
as.character(sms_corpus[[1]])
as.character(sms_corpus_clean[[1]])
sms_corpus_clean
sms_corpus_clean<-tm_map(sms_corpus_clean,removeNumbers)
sms_corpus_clean<-tm_map(sms_corpus_clean,
                         removeWords,stopwords())
sms_corpus_clean <- tm_map(sms_corpus_clean,removePunctuation)
install.packages("SnowballC")
library(SnowballC)

sms_corpus_clean<-tm_map(sms_corpus_clean, stemDocument)
sms_corpus_clean<-tm_map(sms_corpus_clean, stripWhitespace)
as.character(sms_corpus_clean[[1]])
sms_dtm <- DocumentTermMatrix(sms_corpus_clean)
inspect(sms_dtm)
sms_dtm_train <- sms_dtm[1:4619]
inspect(sms_dtm_train)
sms_dtm_test <- sms_dtm[4170:5559]
inspect(sms_dtm_test)
sms_train_labels <- sms_raw[1:4169]$type
sms_train_labels <- sms_raw[1:4169]$type
install.packages("worldcloud")
library(worldcloud)
worldcloud(sms_corpusrpus_clean , min.freq = 50 , random.order = FALSE)
sms_freq_words <- findFreqTerms(sms_dtm_train , 5)
sms_freq_words
stm_dtm_freq_train <- sms_dtm_train[, sms_freq_words]
convert_counts <- function (x) {
    x<- ifelse (x>0 , "Yes" , "No")
}
sms_train <- apply(sms_dtm_freq_train, MARGIN=2,
                   convert_counts)
sms_test <- apply(sms_dtm_freq_test, MARGIN=2,
                   convert_counts)
#install.packages("e1071")
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_test_pred <- predict(sms_classifier, sms_test)

install.packages("gmodels")
library(gmodel)
crossTable(sms_test_pred,sms_train_labels,
           prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
           dnn = c('predicted','actual'))

